import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';

import 'package:forui/forui.dart';

// ignore_for_file: unnecessary_ignore
// ignore_for_file: avoid_redundant_argument_values

/// Generated by Forui CLI.
///
/// Modify the generated function bodies to create your own custom style.
/// Then, call the modified functions and pass the results to your FThemeData.
///
/// ### Example
/// Generated style:
/// ```dart
/// // Modify this function's body.
/// FDividerStyles dividerStyles({
///   required FColorScheme color,
///   required FStyle style,
/// }) => FDividerStyles(
///   horizontalStyle: FDividerStyle(
///     colors: colors.secondary,
///     padding: FDividerStyle.defaultPadding.horizontalStyle,
///     width: style.borderWidth,
///   ),
///   verticalStyle: FDividerStyle(
///     colors: colors.secondary,
///     padding: FDividerStyle.defaultPadding.verticalStyle,
///     width: style.borderWidth,
///   ),
/// );
/// ```
///
/// File that contains your `FThemeData`:
/// ```dart
/// import 'package:my_application/theme/divider_style.dart' // Your generated style file.
///
/// FThemeData(
///  color: FThemes.zinc.light.color,
///  style: FThemes.zinc.light.style,
///  dividerStyles: CustomFDividerStyles.dividerStyles( // The function in your generated style file.
///    color: FThemes.zinc.light.color,
///    style: FThemes.zinc.light.style,
///   ),
/// );
/// ```
///
/// A theme can be generated using the Forui CLI:
/// ```shell
/// dart forui theme create [theme name]
/// ```
///
/// See https://forui.dev/docs/themes#customize-themes for more information.
FSelectMenuTileStyle selectMenuTileStyle({
  required FColors colors,
  required FTypography typography,
  required FStyle style,
}) {
  final groupStyle = _tileGroupStyle(
    colors: colors,
    style: style,
    typography: typography,
  );
  return FSelectMenuTileStyle(
    menuStyle: _popoverMenuStyle(
      colors: colors,
      style: style,
      typography: typography,
    ),
    tileStyle: _tileStyle(colors: colors, typography: typography, style: style),
    labelTextStyle: groupStyle.labelTextStyle,
    descriptionTextStyle: groupStyle.descriptionTextStyle,
    errorTextStyle: groupStyle.errorTextStyle,
    labelPadding: groupStyle.labelPadding,
    descriptionPadding: groupStyle.descriptionPadding,
    errorPadding: groupStyle.errorPadding,
  );
}

FPopoverMenuStyle _popoverMenuStyle({
  required FColors colors,
  required FStyle style,
  required FTypography typography,
}) => FPopoverMenuStyle.inherit(
  colors: colors,
  style: style,
  typography: typography,
);

FItemGroupStyle _itemGroupStyle({
  required FColors colors,
  required FTypography typography,
  required FStyle style,
}) => FItemGroupStyle(
  itemStyle: _itemStyle(colors: colors, typography: typography, style: style),
  dividerColor: FWidgetStateMap.all(colors.border),
  dividerWidth: style.borderWidth,
  decoration: const BoxDecoration(),
  spacing: 4,
);

FItemStyle _itemStyle({
  required FColors colors,
  required FTypography typography,
  required FStyle style,
}) => FItemStyle(
  backgroundColor: FWidgetStateMap({
    WidgetState.disabled: colors.disable(colors.secondary),
    WidgetState.any: colors.background,
  }),
  decoration: FWidgetStateMap({
    WidgetState.disabled: BoxDecoration(
      color: colors.disable(colors.secondary),
      borderRadius: style.borderRadius,
    ),
    WidgetState.hovered | WidgetState.pressed: BoxDecoration(
      color: colors.secondary,
      borderRadius: style.borderRadius,
    ),
    WidgetState.any: BoxDecoration(
      color: colors.background,
      borderRadius: style.borderRadius,
    ),
  }),
  contentStyle: _itemContentStyle(colors: colors, typography: typography),
  rawItemContentStyle: _rawItemContentStyle(
    colors: colors,
    typography: typography,
  ),
  tappableStyle: style.tappableStyle.copyWith(
    bounceTween: FTappableStyle.noBounceTween,
    pressedEnterDuration: Duration.zero,
    pressedExitDuration: const Duration(milliseconds: 25),
  ),
  focusedOutlineStyle: style.focusedOutlineStyle,
  margin: const EdgeInsets.symmetric(vertical: 2, horizontal: 4),
);

FItemContentStyle _itemContentStyle({
  required FColors colors,
  required FTypography typography,
}) => FItemContentStyle(
  prefixIconStyle: FWidgetStateMap({
    WidgetState.disabled: IconThemeData(
      color: colors.disable(colors.primary),
      size: 15,
    ),
    WidgetState.any: IconThemeData(color: colors.primary, size: 15),
  }),
  titleTextStyle: FWidgetStateMap({
    WidgetState.disabled: typography.sm.copyWith(
      color: colors.disable(colors.primary),
    ),
    WidgetState.any: typography.sm,
  }),
  subtitleTextStyle: FWidgetStateMap({
    WidgetState.disabled: typography.xs.copyWith(
      color: colors.disable(colors.mutedForeground),
    ),
    WidgetState.any: typography.xs.copyWith(color: colors.mutedForeground),
  }),
  detailsTextStyle: FWidgetStateMap({
    WidgetState.disabled: typography.xs.copyWith(
      color: colors.disable(colors.mutedForeground),
    ),
    WidgetState.any: typography.xs.copyWith(color: colors.mutedForeground),
  }),
  suffixIconStyle: FWidgetStateMap({
    WidgetState.disabled: IconThemeData(
      color: colors.disable(colors.mutedForeground),
      size: 15,
    ),
    WidgetState.any: IconThemeData(color: colors.mutedForeground, size: 15),
  }),
  padding: const EdgeInsetsDirectional.only(
    start: 11,
    top: 7.5,
    bottom: 7.5,
    end: 6,
  ),
  prefixIconSpacing: 10,
  titleSpacing: 3,
  middleSpacing: 4,
  suffixIconSpacing: 5,
);

FRawItemContentStyle _rawItemContentStyle({
  required FColors colors,
  required FTypography typography,
}) => FRawItemContentStyle(
  prefixIconStyle: FWidgetStateMap({
    WidgetState.disabled: IconThemeData(
      color: colors.disable(colors.primary),
      size: 15,
    ),
    WidgetState.any: IconThemeData(color: colors.primary, size: 15),
  }),
  childTextStyle: FWidgetStateMap({
    WidgetState.disabled: typography.sm.copyWith(
      color: colors.disable(colors.primary),
    ),
    WidgetState.any: typography.sm,
  }),
  padding: const EdgeInsetsDirectional.only(
    start: 15,
    top: 7.5,
    bottom: 7.5,
    end: 10,
  ),
  prefixIconSpacing: 10,
);

FTileGroupStyle _tileGroupStyle({
  required FColors colors,
  required FTypography typography,
  required FStyle style,
}) {
  final tileStyle = _tileStyle(
    colors: colors,
    typography: typography,
    style: style,
  );
  return FTileGroupStyle(
    decoration: BoxDecoration(
      border: Border.all(color: colors.border, width: style.borderWidth),
      borderRadius: style.borderRadius,
    ),
    tileStyle: tileStyle.copyWith(
      decoration: tileStyle.decoration.map(
        (d) => d == null
            ? null
            : BoxDecoration(
                color: d.color,
                image: d.image,
                boxShadow: d.boxShadow,
                gradient: d.gradient,
                backgroundBlendMode: d.backgroundBlendMode,
                shape: d.shape,
              ),
      ),
    ),
    dividerColor: FWidgetStateMap.all(colors.border),
    dividerWidth: style.borderWidth,
    labelTextStyle: FWidgetStateMap({
      WidgetState.error: typography.base.copyWith(
        color:
            style.formFieldStyle.labelTextStyle.maybeResolve({})?.color ??
            colors.primary,
        fontWeight: FontWeight.w600,
      ),
      WidgetState.disabled: typography.base.copyWith(
        color:
            style.formFieldStyle.labelTextStyle.maybeResolve({
              WidgetState.disabled,
            })?.color ??
            colors.disable(colors.primary),
        fontWeight: FontWeight.w600,
      ),
      WidgetState.any: typography.base.copyWith(
        color:
            style.formFieldStyle.labelTextStyle.maybeResolve({})?.color ??
            colors.primary,
        fontWeight: FontWeight.w600,
      ),
    }),
    descriptionTextStyle: style.formFieldStyle.descriptionTextStyle.map(
      (s) => typography.xs.copyWith(color: s.color),
    ),
    errorTextStyle: typography.xs.copyWith(
      color: style.formFieldStyle.errorTextStyle.color,
    ),
    labelPadding: const EdgeInsets.symmetric(vertical: 7.7),
    descriptionPadding: const EdgeInsets.only(top: 7.5),
    errorPadding: const EdgeInsets.only(top: 5),
    childPadding: EdgeInsets.zero,
  );
}

FTileStyle _tileStyle({
  required FColors colors,
  required FTypography typography,
  required FStyle style,
}) => FTileStyle(
  backgroundColor: FWidgetStateMap.all(colors.background),
  decoration: FWidgetStateMap({
    WidgetState.disabled: BoxDecoration(
      color: colors.disable(colors.secondary),
      border: Border.all(color: colors.border),
      borderRadius: style.borderRadius,
    ),
    WidgetState.hovered | WidgetState.pressed: BoxDecoration(
      color: colors.secondary,
      border: Border.all(color: colors.border),
      borderRadius: style.borderRadius,
    ),
    WidgetState.any: BoxDecoration(
      color: colors.background,
      border: Border.all(color: colors.border),
      borderRadius: style.borderRadius,
    ),
  }),
  contentStyle: FItemContentStyle(
    padding: const EdgeInsetsDirectional.fromSTEB(15, 13, 10, 13),
    prefixIconStyle: FWidgetStateMap({
      WidgetState.disabled: IconThemeData(
        color: colors.disable(colors.primary),
        size: 18,
      ),
      WidgetState.any: IconThemeData(color: colors.primary, size: 18),
    }),
    titleTextStyle: FWidgetStateMap({
      WidgetState.disabled: typography.base.copyWith(
        color: colors.disable(colors.primary),
      ),
      WidgetState.any: typography.base,
    }),
    subtitleTextStyle: FWidgetStateMap({
      WidgetState.disabled: typography.xs.copyWith(
        color: colors.disable(colors.mutedForeground),
      ),
      WidgetState.any: typography.xs.copyWith(color: colors.mutedForeground),
    }),
    detailsTextStyle: FWidgetStateMap({
      WidgetState.disabled: typography.base.copyWith(
        color: colors.disable(colors.mutedForeground),
      ),
      WidgetState.any: typography.base.copyWith(color: colors.mutedForeground),
    }),
    suffixIconStyle: FWidgetStateMap({
      WidgetState.disabled: IconThemeData(
        color: colors.disable(colors.mutedForeground),
        size: 18,
      ),
      WidgetState.any: IconThemeData(color: colors.mutedForeground, size: 18),
    }),
  ),
  rawItemContentStyle: FRawItemContentStyle(
    padding: const EdgeInsetsDirectional.fromSTEB(15, 13, 10, 13),
    prefixIconStyle: FWidgetStateMap({
      WidgetState.disabled: IconThemeData(
        color: colors.disable(colors.primary),
        size: 18,
      ),
      WidgetState.any: IconThemeData(color: colors.primary, size: 18),
    }),
    childTextStyle: FWidgetStateMap({
      WidgetState.disabled: typography.base.copyWith(
        color: colors.disable(colors.primary),
      ),
      WidgetState.any: typography.base,
    }),
  ),
  tappableStyle: style.tappableStyle.copyWith(
    bounceTween: FTappableStyle.noBounceTween,
    pressedEnterDuration: Duration.zero,
    pressedExitDuration: const Duration(milliseconds: 25),
  ),
  focusedOutlineStyle: style.focusedOutlineStyle,
  margin: EdgeInsets.zero,
);
